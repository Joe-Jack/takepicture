<!DOCTYPE html>
<html lang="ja" dir="ltr" itemscope itemtype="http://schema.org/Article">
<head>
  <meta charset="utf-8">
</head>
<body>
    <div class="camera">
        <video id="video">Video stream not available.</video>
    </div><br>
    <button id="startbutton">Take photo</button><br>
    <canvas id="canvas"></canvas>
    <%= form_for(@picture, url: 'camera') do |f| %>
      <%= f.text_field :remark %><br>
	    <!--<%= f.hidden_field :image_url, :value => "" %>-->
	  <% end %>
	  <button id="save-button">保存</button>  
    <!--<textarea id="readStr"></textarea>-->
    
    
  <script>
    let width = 320    // We will scale the photo width to this
    let height = 0     // This will be computed based on the input stream
    
    let streaming = false
    
    let video = null
    let canvas = null
    let photo = null
    let startbutton = null
    let constrains = { video: true, audio: false }
    
    /**
     * ユーザーのデバイスによるカメラ表示を開始し、
     * 各ボタンの挙動を設定する
     *
     */
    function startup() {
      video = document.getElementById('video')
      canvas = document.getElementById('canvas')
      photo = document.getElementById('photo')
      startbutton = document.getElementById('startbutton')
    
      videoStart()
    
      video.addEventListener('canplay', function(ev){
        if (!streaming) {
          height = video.videoHeight / (video.videoWidth/width)
    
          video.setAttribute('width', width)
          video.setAttribute('height', height)
          canvas.setAttribute('width', width)
          canvas.setAttribute('height', height)
          streaming = true
        }
      }, false)
    
      // 「take photo」ボタンをとる挙動を定義
      startbutton.addEventListener('click', function(ev){
        takepicture()
        ev.preventDefault()
      }, false);
    
      clearphoto()
    }
    
    /**
     * カメラ操作を開始する
     */
    function videoStart() {
      streaming = false
      navigator.mediaDevices.getUserMedia(constrains)
      .then(function(stream) {
          video.srcObject = stream
          video.play()
      })
      .catch(function(err) {
          console.log("An error occured! " + err)
      })
    }
    
      /**
     * canvasの写真領域を初期化する
     */
    function clearphoto() {
      let context = canvas.getContext('2d')
      context.fillStyle = "#AAA"
      context.fillRect(0, 0, canvas.width, canvas.height)
    }
    
    /**
     * カメラに表示されている現在の状況を撮影する
     */
    function takepicture() {
      let context = canvas.getContext('2d')
      if (width && height) {
        canvas.width = width
        canvas.height = height
        context.drawImage(video, 0, 0, width, height)
        send()
      } else {
        clearphoto()
      }
    }
    
    function send() {
      data = canvas.toDataURL('image/jpeg').replace(/^.*,/, '')
      alert(data.length)
      $.ajax('/read.php',{
          method: 'POST',
          data: {image: data}
          
      }).then(res => {
          $('#readStr').val(res)
      })
    }
    
    $('#save-button').click(function(){
		var canvas = document.getElementById('canvas');
		// var img = document.getElementById('img');
		// var ctx = canvas.getContext('2d');
		// alert("url")
		url = canvas.toDataURL('image/jpeg').replace(/^.*,/, '');
		
		// alert(url.length);
// 		$("#picture_image_url").val(""); 
// 		$("#picture_image_url").val(url);
// 		$("#new_picture").submit();
// 	})
    startup()

  </script>
</body>